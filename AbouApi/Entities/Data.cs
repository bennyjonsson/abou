// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using dir2abou.Entities;
//
//    var data = Data.FromJson(jsonString);

namespace AbouApi.Entities
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using AbouApi.Interfaces;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Data : IToData
    {
        public Data(IActor actor)
        {
            Actor = actor.Actor;
        }
        [JsonProperty("UniqueId")]
        public string UniqueId { get; set; }

        [JsonProperty("DiaryNumber")]
        public string DiaryNumber { get; set; }

        [JsonProperty("Comment")]
        public string Comment { get; set; }

        [JsonProperty("Actor")]
        public string Actor { get; set; }
    }

    public class GetCaseData : Data
    {
        public GetCaseData(IActor actor) : base(actor)
        {
            Comment = "Get By Date And State";
        }

        /// <summary>
        /// Obligatorisk. Ärenden inskickade fr.o.m. datum omfattas.
        /// </summary>
        [JsonProperty("FromDate")]
        public DateTime FromDate { get; set; }

        /// <summary>
        /// Obligatorisk. Ärenden inskickade t.o.m. omfattas.
        /// </summary>
        [JsonProperty("ToDate")]
        public DateTime ToDate { get; set; }

        /// <summary>
        /// Obligatorisk. Ärenden med statusar som omfattas (kommaseparerad lista).
        /// </summary>
        [JsonProperty("States")]
        public string[] States { get; set; }

        /// <summary>
        /// Om diarieförda ärenden skall omfattas.
        /// </summary>
        [JsonProperty("ExcludeCasesWithDiaryNumber")]
        public bool ExcludeCasesWithDiaryNumber { get; set; }

    }


    public class CasePdfDownloadData : Data
    {
        public CasePdfDownloadData(IActor actor) : base(actor)
        {
            Comment = "Case Pdf Download";
        }
    }

    public class AttachmentDownloadData : Data
    {
        public AttachmentDownloadData(IActor actor) : base(actor)
        {
            Comment = "Attachment Download";
        }

        [JsonProperty("SystemFileName")]
        public string SystemFileName { get; set; }
    }

    public class FileUploadData : Data
    {
        public FileUploadData(IActor actor) : base(actor)
        {
            Comment = "File upload";
        }
    }

    public partial class Data
    {
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, AbouApi.Entities.Converter.Settings);
        }
      
    }

    public abstract class DataDisableSendNotification : Data
    {
        public DataDisableSendNotification(IActor actor) : base(actor)
        {
        }


        [JsonProperty("DisableSendNotification")]
        public bool DisableSendNotification { get; set; }
    }
    public partial class DataDiaryNumber : DataDisableSendNotification
    {
        public DataDiaryNumber(IActor actor) : base(actor)
        {
            Comment = "Update DiaryNumber";
        }
    }

    public partial class DataUpdateAdministrator : DataDisableSendNotification
    {
        [JsonProperty("Administrator")]
        public string Administrator { get; set; }
        public DataUpdateAdministrator(IActor actor) : base(actor)
        {
            Comment = "Update Administrator";
        }
    }
        public partial class DataUpdateStatus : DataDisableSendNotification
    {
        public DataUpdateStatus(IActor actor) : base(actor) {
            Comment = "Update status";
        }
        [JsonProperty("State")]
        public string State { get; set; }


        
    }

        public partial class DataGetDetailed : Data
    {
        public DataGetDetailed(IActor actor) : base(actor) {
            Comment = "Get details";
            XmlGeneratorType = "Abou.Calamare.Framework.Integration.Xml.Default.DefaultXmlCaseGenerator";
            OmitXmlDeclaration = "true";
            IncludeAllAttachements = "true";
            IncludeAllFields = "true";
        }


        [JsonProperty("XmlGeneratorType")]
        public string XmlGeneratorType { get; set; }

        [JsonProperty("IncludeAllFields")]
        public string IncludeAllFields { get; set; }

        [JsonProperty("IncludeAllAttachements")]
        public string IncludeAllAttachements { get; set; }

        [JsonProperty("OmitXmlDeclaration")]
        public string OmitXmlDeclaration { get; set; }

      
    }
    
}
